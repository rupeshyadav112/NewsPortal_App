@model NewsPortal_App.Models.Post

@{
    ViewData["Title"] = Model.Title;
    

    string GetTimeAgo(DateTime createdAt)
    {
        DateTime postTime = createdAt;
        TimeSpan timePassed = DateTime.Now - postTime;

        if (timePassed.TotalMinutes < 1)
            return "Just now";
        if (timePassed.TotalHours < 1)
            return $"{(int)timePassed.TotalMinutes}m ago";
        if (timePassed.TotalDays < 1)
            return $"{(int)timePassed.TotalHours}h ago";
        if (timePassed.TotalDays < 7)
            return $"{(int)timePassed.TotalDays}d ago";

        return postTime.ToString("MMM dd, yyyy");
    }
}

<link rel="stylesheet" href="~/css/ReadArticles.css" asp-append-version="true" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<style>
    .article-title.underlined {
        text-align: center;
        text-decoration: underline;
        margin-bottom: 1rem;
    }

    .category-box {
        display: block;
        padding: 15px 25px;
        background-color: #ffffff;
        color: #9A9B9C;
        font-size: 14px;
        font-weight: bold;
        border: 2px solid #9A9B9C;
        border-radius: 5px;
        margin: 0 auto 1rem;
        text-align: center;
        width: fit-content;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .article-hero-image {
        width: 100%;
        height: auto;
        object-fit: cover;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }

    .horizontal-line {
        border: 0;
        height: 1px;
        background: #e5e7eb;
        margin: 1rem 0;
    }

    .article-subtitle {
        text-align: center;
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .message-box {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
    }

        .message-box.show {
            opacity: 1;
        }

        .message-box.error {
            background-color: #dc3545;
        }

    .comments-count {
        margin-top: 20px;
        margin-bottom: 10px;
        font-size: 1.2rem;
        font-weight: bold;
        color: #333;
    }

    .reply-form {
        margin-top: 10px;
        margin-left: 20px;
        display: none;
    }

    .comment-item.reply {
        margin-left: 40px;
    }

    .news-section {
        margin-top: 20px;
    }

    .news-card {
        border: 1px solid #e5e7eb;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
    }

        .news-card h4 {
            margin: 0 0 5px 0;
            font-size: 1.1rem;
        }

        .news-card p {
            margin: 0 0 5px 0;
            color: #666;
        }

        .news-card a {
            color: #007bff;
            text-decoration: none;
        }

            .news-card a:hover {
                text-decoration: underline;
            }

    /* **महत्वपूर्ण बदलाव: मार्कडाउन स्टाइलिंग को बेहतर किया गया** */
    .article-content h1 {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1rem;
        line-height: 1.2;
    }

    .article-content h2 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.75rem;
        line-height: 1.3;
    }

    .article-content strong {
        font-weight: bold;
    }

    .article-content em {
        font-style: italic;
    }

    .article-content u {
        text-decoration: underline;
    }

    .article-content a {
        color: #007bff;
        text-decoration: underline;
    }

        .article-content a:hover {
            color: #0056b3;
        }

    .user-info p {
        margin: 5px 0;
        font-size: 14px;
    }
 
</style>

<main class="main-content">
    @Html.AntiForgeryToken()
    <div id="messageBox" class="message-box"></div>

    <article class="article-container">
        <div class="article-hero">
            <h1 class="article-title underlined">@Model.Title</h1>
            <div class="category-box">
                @Model.Category
            </div>
            <img src="@Model.ImagePath" alt="@Model.Title" class="article-hero-image" />
            <hr class="horizontal-line" />
            <h2 class="article-subtitle">@Model.Title</h2>
        </div>

        <div class="article-content-wrapper">
            <div class="article-header">
                <div class="article-meta">
                    <span class="meta-item">
                        <i class="far fa-calendar-alt"></i>
                        @Model.CreatedAt.ToString("dd MMM yyyy")
                    </span>
                </div>
            </div>

            <div class="article-content">
                @Html.Raw(Model.Content)
            </div>
            <div class="container">
                <div class="news-banner">
                    <h2>Want to know more about today's TOP 10 news?</h2>
                    <p>Checkout these top news articles. Stay Updated with Daily News: Your Go-To Resources</p>
                    <!-- Bootstrap Responsive Image -->
                    <img src="https://via.placeholder.com/800x400" alt="News Image" class="img-fluid">
                </div>
            </div>

            <div class="comments-section">
                @if (User.Identity.IsAuthenticated)
                {
                    <div class="comment-form">
                        <div class="user-info">
                            <i class="fas fa-user"></i>
                            <span>Commenting as @User.Identity.Name</span>
                        </div>
                        <textarea id="txtComment" class="comment-input" placeholder="Write your comment..." onkeyup="updateCharCount(this)"></textarea>
                        <div class="comment-form-footer">
                            <span class="char-counter">
                                <span id="charCount">200</span> characters remaining
                            </span>
                            <button type="button" id="btnSubmit" class="submit-button">Post Comment</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="comments-banner">
                        <h2>Please <a asp-controller="Account" asp-action="SignIn">login</a> to comment</h2>
                    </div>
                }

                <div class="comments-count">
                    <h3>Comments [@Model.Comments.Count()]</h3>
                </div>

                <div class="comments-list">
                    @foreach (var comment in Model.Comments.Where(c => c.ParentCommentID == null).OrderByDescending(c => c.CreatedAt))
                    {
                        <div class="comment-item @(comment.ParentCommentID != null ? "reply" : "")" data-comment-id="@comment.CommentID">
                            <div class="comment-avatar">
                                <img src="@comment.User.ProfileImagePath" alt="User avatar" />
                            </div>
                            <div class="comment-content">
                                <div class="comment-header">
                                    <span class="comment-author">@comment.User.Username</span>
                                    <span class="comment-time">
                                        @GetTimeAgo(comment.CreatedAt)
                                        @if (comment.ModifiedAt.HasValue)
                                        {
                                            <span>(Edited on @GetTimeAgo(comment.ModifiedAt.Value))</span>
                                        }
                                    </span>
                                </div>
                                <p class="comment-text">@comment.CommentText</p>
                                <div class="comment-actions">
                                    @if (User.Identity.IsAuthenticated && comment.UserID.ToString() != User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                                    {
                                        <button type="button" class="action-btn reply-btn" onclick="showReplyForm(@comment.CommentID)">
                                            <i class="fas fa-reply"></i> Reply
                                        </button>
                                    }
                                    @if (comment.UserID.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                                    {
                                        <button type="button" class="action-btn edit-btn" onclick="editComment(@comment.CommentID)">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button type="button" class="action-btn delete-btn" onclick="deleteComment(@comment.CommentID)">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </button>
                                    }
                                    <button type="button" class="like-button @(comment.Likes.Any(l => l.UserID.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value) ? "liked" : "")"
                                            onclick="likeComment(@comment.CommentID)"
                                            data-comment-id="@comment.CommentID">
                                        <i class="@(comment.Likes.Any(l => l.UserID.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value) ? "fas" : "far") fa-thumbs-up"></i>
                                        <span class="likes-count">@comment.NumberOfLikes</span>
                                    </button>
                                </div>

                                <div class="reply-form" id="replyForm_@comment.CommentID">
                                    <textarea class="comment-input" id="replyText_@comment.CommentID" placeholder="Write your reply..." onkeyup="updateCharCount(this)"></textarea>
                                    <div class="comment-form-footer">
                                        <span class="char-counter">
                                            <span id="replyCharCount_@comment.CommentID">200</span> characters remaining
                                        </span>
                                        <button type="button" class="submit-button" onclick="postReply(@comment.CommentID)">Post Reply</button>
                                    </div>
                                </div>

                                @foreach (var reply in Model.Comments.Where(r => r.ParentCommentID == comment.CommentID).OrderByDescending(r => r.CreatedAt))
                                {
                                    <div class="comment-item reply" data-comment-id="@reply.CommentID">
                                        <div class="comment-avatar">
                                            <img src="@reply.User.ProfileImagePath" alt="User avatar" />
                                        </div>
                                        <div class="comment-content">
                                            <div class="comment-header">
                                                <span class="comment-author">@reply.User.Username</span>
                                                <span class="comment-time">
                                                    @GetTimeAgo(reply.CreatedAt)
                                                    @if (reply.ModifiedAt.HasValue)
                                                    {
                                                        <span>(Edited on @GetTimeAgo(reply.ModifiedAt.Value))</span>
                                                    }
                                                </span>
                                            </div>
                                            <p class="comment-text">@reply.CommentText</p>
                                            <div class="comment-actions">
                                                @if (User.Identity.IsAuthenticated && reply.UserID.ToString() != User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                                                {
                                                    <button type="button" class="action-btn reply-btn" onclick="showReplyForm(@reply.CommentID)">
                                                        <i class="fas fa-reply"></i> Reply
                                                    </button>
                                                }
                                                @if (reply.UserID.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                                                {
                                                    <button type="button" class="action-btn edit-btn" onclick="editComment(@reply.CommentID)">
                                                        <i class="fas fa-edit"></i> Edit
                                                    </button>
                                                    <button type="button" class="action-btn delete-btn" onclick="deleteComment(@reply.CommentID)">
                                                        <i class="fas fa-trash-alt"></i> Delete
                                                    </button>
                                                }
                                                <button type="button" class="like-button @(reply.Likes.Any(l => l.UserID.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value) ? "liked" : "")"
                                                        onclick="likeComment(@reply.CommentID)"
                                                        data-comment-id="@reply.CommentID">
                                                    <i class="@(reply.Likes.Any(l => l.UserID.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value) ? "fas" : "far") fa-thumbs-up"></i>
                                                    <span class="likes-count">@reply.NumberOfLikes</span>
                                                </button>
                                            </div>

                                            <div class="reply-form" id="replyForm_@reply.CommentID">
                                                <textarea class="comment-input" id="replyText_@reply.CommentID" placeholder="Write your reply..." onkeyup="updateCharCount(this)"></textarea>
                                                <div class="comment-form-footer">
                                                    <span class="char-counter">
                                                        <span id="replyCharCount_@reply.CommentID">200</span> characters remaining
                                                    </span>
                                                    <button type="button" class="submit-button" onclick="postReply(@reply.CommentID)">Post Reply</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <section class="recent-articles">
                <h2 class="section-title">Recently Published Articles</h2>
                <div class="articles-grid">
                    @foreach (var article in ViewBag.RecentArticles)
                    {
                        <div class="article-card">
                            <div class="card-image">
                                <img src="@article.ImagePath" alt="@article.Title" />
                            </div>
                            <div class="card-content">
                                <h3 class="card-title">@article.Title</h3>
                                <div class="card-category">@article.Category</div>
                                <div class="card-meta">
                                    <time>@article.CreatedAt.ToString("dd MMM yyyy")</time>
                                </div>
                                <a asp-controller="YourArticles" asp-action="Index" asp-route-id="@article.PostID" class="read-more">
                                    Read Full Article <i class="fas fa-arrow-right"></i>
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </section>

            <section class="news-section">
                <h2 class="section-title">Latest News</h2>
                <div class="articles-grid">
                    @if (ViewBag.NewsArticles != null && ViewBag.NewsArticles.Count > 0)
                    {
                        foreach (var news in ViewBag.NewsArticles)
                        {
                            <div class="news-card">
                                <h4>@news.Title</h4>
                                <p>@news.Description</p>
                                <a href="@news.Url" target="_blank">Read more</a>
                                <p><small>Published: @news.PublishedAt.ToString("dd MMM yyyy HH:mm")</small></p>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No news available at the moment.</p>
                    }
                </div>
            </section>
        </div>
    </article>
</main>

@section Scripts {
    <script>
        function showMessage(message, isError = false) {
            const messageBox = document.getElementById('messageBox');
            messageBox.textContent = message;
            messageBox.classList.remove('error');
            if (isError) {
                messageBox.classList.add('error');
            }
            messageBox.classList.add('show');
            setTimeout(() => {
                messageBox.classList.remove('show');
            }, 3000);
        }

        function updateCharCount(textarea) {
            const maxLength = 200;
            const currentLength = textarea.value.length;
            const remaining = maxLength - currentLength;
            const charCount = textarea.id.includes('replyText') ? document.getElementById('replyCharCount_' + textarea.id.split('_')[1]) : document.getElementById('charCount');
            charCount.textContent = remaining;
            if (currentLength > maxLength) {
                textarea.value = textarea.value.substring(0, maxLength);
            }
        }

        document.getElementById('btnSubmit').addEventListener('click', function (e) {
            e.preventDefault();
            console.log("Post Comment button clicked");

            const commentText = document.getElementById('txtComment').value;
            if (!commentText.trim()) {
                showMessage("Please enter a comment", true);
                console.log("Comment text is empty");
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const postId = @Model.PostID;
            console.log("Sending request:", { postId: postId, commentText: commentText, token: token ? "Present" : "Missing" });

            fetch(`/YourArticles/AddComment?postId=${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ commentText: commentText })
            })
            .then(response => {
                console.log("Response received:", { status: response.status, statusText: response.statusText });
                return response.text().then(text => ({ status: response.status, text: text }));
            })
            .then(result => {
                if (result.status >= 200 && result.status < 300) {
                    console.log("Comment posted successfully");
                    document.getElementById('txtComment').value = '';
                    showMessage("Comment posted successfully");
                    location.reload();
                }
                else {
                    console.error("Server error:", result.text);
                    showMessage("Failed to post comment: " + result.text, true);
                }
            })
            .catch(error => {
                console.error("Fetch error:", error.message);
                showMessage("Failed to add comment: " + error.message, true);
            });
        });

        function showReplyForm(commentId) {
            const replyForm = document.getElementById(`replyForm_${commentId}`);
            replyForm.style.display = replyForm.style.display === 'block' ? 'none' : 'block';
        }

        function postReply(parentCommentId) {
            const replyText = document.getElementById(`replyText_${parentCommentId}`).value;
            if (!replyText.trim()) {
                showMessage("Please enter a reply", true);
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const postId = @Model.PostID;
            fetch(`/YourArticles/AddComment?postId=${postId}&parentCommentId=${parentCommentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ commentText: replyText })
            })
            .then(response => {
                console.log("Reply response:", { status: response.status, statusText: response.statusText });
                return response.text().then(text => ({ status: response.status, text: text }));
            })
            .then(result => {
                if (result.status >= 200 && result.status < 300) {
                    console.log("Reply posted successfully");
                    document.getElementById(`replyText_${parentCommentId}`).value = '';
                    showMessage("Reply posted successfully");
                    location.reload();
                }
                else {
                    console.error("Server error:", result.text);
                    showMessage("Failed to post reply: " + result.text, true);
                }
            })
            .catch(error => {
                console.error("Fetch error:", error.message);
                showMessage("Failed to post reply: " + error.message, true);
            });
        }

        function editComment(commentId) {
            const commentDiv = document.querySelector(`[data-comment-id="${commentId}"]`);
            const commentText = commentDiv.querySelector('.comment-text');
            const originalText = commentText.textContent.trim();
            const editForm = document.createElement('div');
            editForm.className = 'edit-form';
            editForm.innerHTML = `
                <textarea class="comment-input">${originalText}</textarea>
                <div class="edit-actions">
                    <button type="button" class="submit-button" onclick="saveComment(${commentId})">Save</button>
                    <button type="button" class="cancel-button" onclick="cancelEdit(${commentId}, '${originalText.replace(/'/g, "\\'")}')">Cancel</button>
                </div>
            `;
            commentText.style.display = 'none';
            commentText.insertAdjacentElement('afterend', editForm);
        }

        function saveComment(commentId) {
            const commentDiv = document.querySelector(`[data-comment-id="${commentId}"]`);
            const editForm = commentDiv.querySelector('.edit-form');
            const commentText = commentDiv.querySelector('.comment-text');
            const newText = editForm.querySelector('textarea').value.trim();
            if (!newText) {
                showMessage("Comment cannot be empty", true);
                return;
            }
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(`/YourArticles/EditComment?commentId=${commentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ commentText: newText })
            })
            .then(response => {
                console.log("Edit response:", { status: response.status, statusText: response.statusText });
                return response.text().then(text => ({ status: response.status, text: text }));
            })
            .then(result => {
                if (result.status >= 200 && result.status < 300) {
                    commentText.textContent = newText;
                    commentText.style.display = 'block';
                    editForm.remove();
                    showMessage("Comment updated successfully");
                    location.reload();
                }
                else {
                    console.error("Edit server error:", result.text);
                    showMessage("Failed to update comment: " + result.text, true);
                }
            })
            .catch(error => {
                console.error("Edit fetch error:", error.message);
                showMessage("Failed to update comment: " + error.message, true);
            });
        }

        function cancelEdit(commentId, originalText) {
            const commentDiv = document.querySelector(`[data-comment-id="${commentId}"]`);
            const editForm = commentDiv.querySelector('.edit-form');
            const commentText = commentDiv.querySelector('.comment-text');
            commentText.textContent = originalText;
            commentText.style.display = 'block';
            editForm.remove();
        }

        function deleteComment(commentId) {
            if (!confirm('Are you sure you want to delete this comment?')) return;
            console.log("Attempting to delete comment with ID:", commentId);
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(`/YourArticles/DeleteComment?commentId=${commentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                console.log("Delete response:", { status: response.status, statusText: response.statusText });
                return response.text().then(text => ({ status: response.status, text: text }));
            })
            .then(result => {
                if (result.status >= 200 && result.status < 300) {
                    const commentDiv = document.querySelector(`[data-comment-id="${commentId}"]`);
                    commentDiv.remove();
                    showMessage("Comment deleted successfully");
                    location.reload();
                }
                else if (result.status === 404) {
                    console.error("Delete server error: Comment not found for ID:", commentId, "Response:", result.text);
                    showMessage("Comment not found: " + result.text, true);
                }
                else {
                    console.error("Delete server error:", result.text, "for ID:", commentId);
                    showMessage("Failed to delete comment: " + result.text, true);
                }
            })
            .catch(error => {
                console.error("Delete fetch error:", error.message, "for ID:", commentId);
                showMessage("Failed to delete comment: " + error.message, true);
            });
        }

        function likeComment(commentId) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const likeButton = document.querySelector(`[data-comment-id="${commentId}"] .like-button`);
            const isLiked = likeButton.classList.contains('liked');
            fetch(`/YourArticles/ToggleLike?commentId=${commentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const likesCount = likeButton.querySelector('.likes-count');
                    const icon = likeButton.querySelector('i');
                    likesCount.textContent = data.numberOfLikes;
                    likeButton.classList.toggle('liked');
                    icon.classList.toggle('far');
                    icon.classList.toggle('fas');
                    showMessage(isLiked ? "Comment unliked successfully" : "Comment liked successfully");
                }
            })
            .catch(error => {
                console.error("Like fetch error:", error.message);
                showMessage("Failed to like comment: " + error.message, true);
            });
        }


    </script>
}